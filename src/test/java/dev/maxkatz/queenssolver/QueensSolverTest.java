/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.maxkatz.queenssolver;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;

class QueensSolverTest {
    /**
     * Ensure coordinates can be created and compared properly.
     */
    @Test void coordsBehave() {
        Coords c1 = new Coords(0, 0);
        Coords c2 = new Coords(1, 2);
        Coords c3 = new Coords(1, 2);
        assertFalse(c1.equals(c2));
        assertFalse(c1.equals(c3));
        assertFalse(c2.equals(c1));
        assertTrue(c2.equals(c3));
        assertFalse(c3.equals(c1));
        assertTrue(c3.equals(c2));
    }
    
    /**
     * Check that the board state is as expected when placing queens.
     */
    @Test void queenCanBePlacedOnBoard() {
        Board b = new Board(4);
        Coords queen = new Coords(1, 2);
        boolean[] expectedRows = {false, true, false, false};
        boolean[] expectedCols = {false, false, true, false};
        boolean[] expectedMains = {false, false, false, true, false, false, false};
        boolean[] expectedAntis = {false, false, true, false, false, false, false};
        b.placeQueen(queen);
        assertArrayEquals(b.getRows(), expectedRows, "Rows unequal");
        assertArrayEquals(b.getCols(), expectedCols, "Columns unequal");
        assertArrayEquals(b.getMains(), expectedMains, "Main diagonals unequal");
        assertArrayEquals(b.getAntis(), expectedAntis, "Anti diagonals unequal");
    }
    
    /**
     * Check whether Board.testValidPosition() returns correct results
     */
    @Test void testValidPositions() {
        Coords[] positions = {
            new Coords(0, 0), new Coords(1, 0), new Coords(2, 0),
            new Coords(0, 1), new Coords(1, 1), new Coords(2, 1),
            new Coords(0, 2), new Coords(1, 2), new Coords(2, 2)
        };
        
        // First test: On a 3x3 board, the corner position should only have
        // two valid moves.
        Board b = new Board(3);
        Coords queen = new Coords(2, 2);
        boolean[] expectedResults = {
            false, true, false,
            true, false, false,
            false, false, false
        };
        b.placeQueen(queen);
        for(int i = 0; i < 9; i++) {
            assertEquals(b.testValidPosition(positions[i]), expectedResults[i], "testValidPositions() returned unexpected result");
        }
        
        // Second test: No valid moves for the center position on a 3x3 board
        b = new Board(3);
        Coords centerQueen = new Coords(1, 1);
        b.placeQueen(centerQueen);
        for(int i = 0; i < 9; i++) {
            assertFalse(b.testValidPosition(positions[i]));
        }
    }
    
    /**
     * Ensure coordinates can be cleared.
     */
    @Test void coordsCanBeCleared() {
        // Place a queen and make assertions about its placement
        Board b = new Board(2);
        Coords queen = new Coords(0, 1);
        b.placeQueen(queen);
        boolean[] expectedRows = {true, false};
        boolean[] expectedCols = {false, true};
        boolean[] expectedMains = {false, true, false};
        boolean[] expectedAntis = {true, false, false};
        assertArrayEquals(b.getRows(), expectedRows, "Rows unequal");
        assertArrayEquals(b.getCols(), expectedCols, "Columns unequal");
        assertArrayEquals(b.getMains(), expectedMains, "Main diagonals unequal");
        assertArrayEquals(b.getAntis(), expectedAntis, "Anti diagonals unequal");
        
        // Now remove that queen and assert all rows, columns, mains, and antis are now false
        b.clearQueen();
        boolean[] expectedRowsCleared = {false, false};
        boolean[] expectedColsCleared = {false, false};
        boolean[] expectedMainsCleared = {false, false, false};
        boolean[] expectedAntisCleared = {false, false, false};
        assertArrayEquals(b.getRows(), expectedRowsCleared, "Rows unequal");
        assertArrayEquals(b.getCols(), expectedColsCleared, "Columns unequal");
        assertArrayEquals(b.getMains(), expectedMainsCleared, "Main diagonals unequal");
        assertArrayEquals(b.getAntis(), expectedAntisCleared, "Anti diagonals unequal");
    }
    
    /**
     * Ensure Board objects can be cloned correctly
     */
    @Test void boardsCanBeCloned() {
        Board b1 = new Board(2);                    // Create a board
        Coords queen = new Coords(0, 1);
        b1.placeQueen(queen);                       // Mutate it
        Board b2 = (Board)((Board) b1).clone();     // Make a copy
        b1.clearQueen();                            // Mutate the original again
        
        // Now test to ensure the copy wasn't mutated
        boolean[] expectedRows = {true, false};
        boolean[] expectedCols = {false, true};
        boolean[] expectedMains = {false, true, false};
        boolean[] expectedAntis = {true, false, false};
        assertArrayEquals(b2.getRows(), expectedRows, "Rows incorrect");
        assertArrayEquals(b2.getCols(), expectedCols, "Columns incorrect");
        assertArrayEquals(b2.getMains(), expectedMains, "Main diagonals incorrect");
        assertArrayEquals(b2.getAntis(), expectedAntis, "Anti diagonals incorrect");
    }
    
    /**
     * Ensure Board objects can be cloned correctly
     */
    @Test void testQueensSolver() {
        int[] solutionCounts = { 1, 0, 0, 2, 10, 4, 40, 92, 352, 724 };
        for(int i = 1; i <= solutionCounts.length; i++) {
            QueensSolver qs = new QueensSolver();
            ArrayList<Board> solutions = qs.testQueens(i);
            assertEquals(solutions.size(), solutionCounts[i - 1], "Incorrect number of solutions.");
        }
    }
    
    /**
     * Test that solutions containing colinear triplets are being stripped.
     */
    @Test void testColinearStipper() {
        QueensSolver qs = new QueensSolver();
        ArrayList<Board> solutions = qs.testQueens(8);
        qs.stripColinearTriplets(solutions);
        assertEquals(solutions.size(), 8, "Incorrect number of solutions.");
        solutions.clear();
        solutions = qs.testQueens(5);
        qs.stripColinearTriplets(solutions);
        assertEquals(solutions.size(), 0, "Incorrect number of solutions.");
    }
}
